{"ast":null,"code":"const customFetch = (url, headers) => {\n  return fetch(url, headers).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      Promise.reject(res.statusText);\n    }\n  });\n};\n\nclass Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n\n    this.getCard = () => {\n      return customFetch(`${this.baseUrl}/cards`, {\n        headers: this.headers\n      });\n    };\n\n    this.getUserInfo = () => {\n      return customFetch(`${this.baseUrl}/users/me`, {\n        headers: this.headers\n      });\n    };\n\n    this.setUserInfoToServer = inputData => {\n      return customFetch(`${this.baseUrl}/users/me`, {\n        method: \"PATCH\",\n        headers: this.headers,\n        body: JSON.stringify({\n          name: inputData.name,\n          about: inputData.about\n        })\n      });\n    };\n\n    this.cardLikeRequset = cardId => {\n      return customFetch(`${this.baseUrl}/cards/likes/${cardId}`, {\n        method: \"PUT\",\n        headers: this.headers\n      });\n    };\n\n    this.cardUnLikeRequset = cardId => {\n      return customFetch(`${this.baseUrl}/cards/likes/${cardId}`, {\n        method: \"DELETE\",\n        headers: this.headers\n      });\n    };\n\n    this.changeLikeCardStatus = (cardId, isLiked) => {\n      return customFetch(`${this.baseUrl}/cards/likes/${cardId}`, {\n        method: `${isLiked ? \"PUT\" : \"DELETE\"}`,\n        headers: this.headers\n      });\n    };\n\n    this.setUserPicUrl = data => {\n      return customFetch(`${this.baseUrl}/users/me/avatar`, {\n        method: \"PATCH\",\n        headers: this.headers,\n        body: JSON.stringify({\n          avatar: data.avatar\n        })\n      });\n    };\n\n    this.deleteCardRequest = elementId => {\n      return customFetch(`${this.baseUrl}/cards/${elementId}`, {\n        method: \"DELETE\",\n        headers: this.headers\n      });\n    };\n\n    this.baseUrl = baseUrl;\n    this.headers = headers;\n  } //get arry of cards obj from server\n\n\n  //add card func\n  setCardToServr(data) {\n    return customFetch(`${this.baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    });\n  } //end of class\n\n\n} //Token: 2dbf8d5b-1a4e-4959-a937-202ce5167a76 Group ID: group-12\n\n\nconst api = new Api({\n  baseUrl: `http://localhost:3001`,\n  headers: {\n    authorization: `Bearer ${localStorage.getItem(\"jwt\")}`,\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/shalom/Desktop/Â Root project/aerond us /frontend/src/utils/api.js"],"names":["customFetch","url","headers","fetch","then","res","ok","json","Promise","reject","statusText","Api","constructor","baseUrl","getCard","getUserInfo","setUserInfoToServer","inputData","method","body","JSON","stringify","name","about","cardLikeRequset","cardId","cardUnLikeRequset","changeLikeCardStatus","isLiked","setUserPicUrl","data","avatar","deleteCardRequest","elementId","setCardToServr","link","api","authorization","localStorage","getItem"],"mappings":"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","sourcesContent":["const customFetch = (url, headers) => {\r\n    return fetch(url, headers).then((res) => {\r\n        if (res.ok) { return res.json(); }\r\n        else { Promise.reject(res.statusText); }\r\n    })\r\n\r\n}\r\n  class Api {\r\n    constructor({ baseUrl, headers }) {\r\n        this.baseUrl = baseUrl;\r\n        this.headers = headers;\r\n\r\n    }\r\n    //get arry of cards obj from server\r\n    getCard = () => {\r\n        return customFetch(`${this.baseUrl}/cards`, { headers: this.headers })\r\n\r\n    };\r\n    //get user info from server\r\n    getUserInfo = () => {\r\n        return customFetch(`${this.baseUrl}/users/me`, { headers: this.headers })\r\n    }\r\n\r\n \r\n    //set user info\r\n    setUserInfoToServer = (inputData) => {\r\n        return customFetch(`${this.baseUrl}/users/me`, {\r\n            method: \"PATCH\",\r\n            headers: this.headers,\r\n            body: JSON.stringify({\r\n                name: inputData.name,\r\n                about: inputData.about\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    //card like requset\r\n    cardLikeRequset = (cardId) => {\r\n        return customFetch(`${this.baseUrl}/cards/likes/${cardId}`,\r\n            {\r\n                method: \"PUT\",\r\n                headers: this.headers,\r\n            }\r\n        )\r\n    }\r\n\r\n    //unlike card req from server\r\n    cardUnLikeRequset = (cardId) => {\r\n        return customFetch(`${this.baseUrl}/cards/likes/${cardId}`,\r\n            {\r\n                method: \"DELETE\",\r\n                headers: this.headers,\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    changeLikeCardStatus = (cardId, isLiked) => {\r\n        return customFetch(`${this.baseUrl}/cards/likes/${cardId}`,\r\n            {\r\n                method:`${isLiked ? \"PUT\" : \"DELETE\"}`,\r\n                headers: this.headers,\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    // requset to chenge profile pic \r\n    setUserPicUrl = (data) => {\r\n        return customFetch(`${this.baseUrl}/users/me/avatar`, {\r\n            method: \"PATCH\",\r\n            headers: this.headers,\r\n            body: JSON.stringify({\r\n                avatar: data.avatar\r\n            })\r\n        })\r\n    }\r\n    //add card func\r\n    setCardToServr(data) {\r\n        return customFetch(`${this.baseUrl}/cards`, {\r\n            method: \"POST\",\r\n            headers: this.headers,\r\n            body: JSON.stringify({\r\n                name: data.name,\r\n                link: data.link\r\n            })\r\n        })\r\n    }\r\n\r\n    deleteCardRequest = (elementId) => {\r\n        return customFetch(`${this.baseUrl}/cards/${elementId}`,\r\n            {\r\n                method: \"DELETE\",\r\n                headers: this.headers,\r\n            }\r\n        )\r\n    }\r\nupdateToken\r\n\r\n\r\n    //end of class\r\n}\r\n\r\n\r\n\r\n//Token: 2dbf8d5b-1a4e-4959-a937-202ce5167a76 Group ID: group-12\r\n\r\n  const api = new Api({\r\n    baseUrl: `http://localhost:3001`,\r\n    headers: {\r\n        authorization:`Bearer ${localStorage.getItem(\"jwt\")}`,\r\n        \"Content-Type\": \"application/json\"\r\n    }\r\n});\r\n\r\n\r\nexport default api"]},"metadata":{},"sourceType":"module"}